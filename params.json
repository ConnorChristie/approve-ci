{
  "name": "Approve-ci",
  "tagline": "Automate your pull request approvals.",
  "body": "# Approve-CI\r\n\r\nApprove-CI is a continuous integration tool that monitors pull requests made on GitHub and checks for approval from the rest of your team. The tool watches the comments made on your request for pre-configured ‘approve’ or ‘disapprove’ messages: when your team has reviewed the code and the number of approvals exceeds the number of disapprovals by a set amount, the check passes and request can be merged.\r\n\r\n![approve-ci in use](http://i.imgur.com/2aMhuzk.png)\r\n\r\nWhat’s the purpose? Well, at [Enki](https://enki.com/) we review all of our code changes using pull requests, only merging changes when they are approved by the other devs. We decided to formalise this (and save ourselves some work) by creating a bot. The review status of new features, bug fixes and other changes are now immediately obvious - and any accidental merges left by the wayside.\r\n\r\n## How To Use?\r\n\r\nDo you want to use it? Adding the tool to your repository is easy: just add a Webhook to your account or organisation, point the trigger at our deployment, and select the appropriate events!\r\n\r\n- Go to\r\n - your _project_ on GitHub > Settings > Webhooks & services > Add Webhook or\r\n - your _organization_ on GitHub > Settings > Webhooks > Add Webhook\r\n- Set the payload URL to `https://approve-ci.herokuapp.com/`\r\n- Let me select individual events > Check `repo`\r\n- Add Webhook\r\n\r\nAnd you are done! Next time a pull request is opened, you should see the pending status from approve-ci ;)\r\n\r\n## Configuration\r\n\r\nThe tool can be configured by adding a `.approve-ci` file to the base directory of the repo. Here's a list of the possible options:\r\n\r\n```\r\n{\r\n  \"name\": \"approve-ci\",\r\n  \"approvalCount\": 1,\r\n  \"approvalStrings\": [\"%F0%9F%91%8D\", \":+1:\", \":thumbsup:\"],\r\n  \"disapprovalStrings\": [\"%F0%9F%91%8E\", \":-1:\", \":thumbsdown:\"],\r\n  \"approveString\": \"The pull request was approved\",\r\n  \"rejectString\": \"The pull request needs more work\",\r\n  \"pendingString\": \"Waiting for approval\"\r\n}\r\n```\r\n\r\nWhen using emojis you must [URI encodeURI](http://pressbin.com/tools/urlencode_urldecode/) them (as shown above for :thumbsup: and :thumbsdown:).\r\n\r\n## Protected branches\r\n\r\nGitHub allows you protect branches and to require specific tests to pass before pull requests can be merged. You can set this up by visiting [https://github.com/USERNAME/REPO/settings/branches](https://github.com/USERNAME/REPO/settings/branches), selecting the branch you want to protect and then checking the approve-ci bot (the name is defined in the configuration file, see the next section), approval is needed before a request can be merged.\r\n\r\n[![Protected branches](http://i.imgur.com/bpEb9nU.png)](https://github.com/enkidevs/approve-ci/settings/branches)\r\n\r\n## How To Contribute or Run Your Own?\r\n\r\nApprove-CI is also super-customisable and hacker-friendly! If you want to tinker, the tool can be deployed in a few clicks using Heroku, deployed locally or containerised using Docker. If you want to use a different account for the tool, change the message or extend it with more functionalities, we've tried to make it super easy:\r\n\r\n```bash\r\ngit clone https://github.com/enkidevs/approve-ci.git\r\ncd approve-ci\r\nnpm install\r\nnpm start\r\n# Follow the instructions there\r\n```\r\n\r\nAlternatively you can deploy the tool using Heroku by pressing the button below:\r\n\r\n[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)\r\n\r\nOr you can build and deploy on your servers using Docker:\r\n\r\n```bash\r\ndocker build -t approve-ci .\r\ndocker run -d -p 80:3000 -e GITHUB_TOKEN=<YOUR_GITHUB_TOKEN_HERE> approve-ci\r\n``` \r\n\r\n## License\r\n\r\n Approve-CI is available under the MIT license.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}